<%
candidates_count = candidates.count
candidates_ids = candidates.pluck(:id)
candidates_concerned = Candidate.where(id: candidates_ids)
%>

<div class="row">
    <div class="col-md-4">
        <%
        scholarships = candidates_concerned.where(scholarship: true).count
        non_scholarships = candidates_concerned.where(scholarship: false).count
        scholarships_percent = (100.0 * scholarships / candidates_count).round
        non_scholarships_percent = (100.0 * non_scholarships / candidates_count).round
        %>
        <h3><%= scholarships_percent %>% boursiers</h3>
        <p><%= scholarships %> candidats</p>
        <%= pie_chart [
            ['Boursiers', scholarships],
            ['Non boursiers', non_scholarships]
            ]%>
    </div>
    <div class="col-md-5">
        <%
        bac_tech = Baccalaureat.find_by(title: 'Bacheliers technologiques toutes séries')
        bac_gen = Baccalaureat.find_by(title: 'Tous les candidats sauf les Bac technologiques')
        techs_count = candidates_concerned.where(baccalaureat_id: bac_tech.children_ids).count
        gens_count = candidates_concerned.where(baccalaureat_id: bac_gen.children_ids).count
        techs = (100.0 * techs_count / candidates_count).round
        gens = (100.0 * gens_count / candidates_count).round
        %>
        <h3><%= techs %>% bacs technologiques</h3>
        <p><%= techs_count %> candidats</p>
        <%= pie_chart [
            [bac_tech.to_s, techs],
            [bac_gen.to_s, gens]
        ] %>
    </div>
    <div class="col-md-3">
        <h3>Genre</h3>
        <%= pie_chart candidates_concerned.group(:gender).count %>
    </div>
</div>

<h3>Répartition par évaluateur du dossier</h3>
<div class="row">
    <div class="col-md-4">
      <%= pie_chart User.evaluators.map { |u|
        [u.to_s, candidates.where(evaluated_by: u).count ]
      } %>
    </div>
    <div class="col-md-8">
      <%= column_chart User.evaluators.map { |u|
        {
          name: u.to_s,
          data: 10.times.map { |index|
            index += 1
            count = candidates.where(evaluated_by: u, decile => index).count
            ["D#{index}", count]
          }
        }
      }, stacked: true %>
    </div>
</div>

<h3>Répartition par jury d'entretien</h3>
<div class="row">
    <div class="col-md-4">
      <%= pie_chart User.evaluators.map { |u|
        [u.to_s, u.candidates_interviewed.where(id: candidates).count ]
      } %>
    </div>
    <div class="col-md-8">
      <%= column_chart User.evaluators.map { |u|
        {
          name: u.to_s,
          data: 10.times.map { |index|
            index += 1
            count = u.candidates_interviewed.where(id: candidates_ids, decile => index).count
            ["D#{index}", count]
          }
        }
      }, stacked: true %>
    </div>
</div>

<div id="sunburst"></div>
<script type="text/javascript">
<%
data = [
    {
    id: '0',
    parent: '',
    name: 'Candidats'
    }
]
Baccalaureat.all.each { |baccalaureat|
  inherited_candidates_ids = baccalaureat.inherited_candidates.pluck(:id)
  candidates_in_bac = candidates_ids & inherited_candidates_ids
  next if candidates_in_bac.none?
  result = {
    id: baccalaureat.id.to_s,
    parent: baccalaureat.parent_id ? baccalaureat.parent_id.to_s : '0',
    name: baccalaureat.title,
    value: candidates_in_bac.count
  }
  result[:color] = 'rgb(96,153,208)' if baccalaureat.title == 'Bacheliers technologiques toutes séries'
  result[:color] = 'rgb(92,92,97)' if baccalaureat.title == 'Tous les candidats sauf les Bac technologiques'
  data << result
}
%>
// Splice in transparent for the center circle
Highcharts.getOptions().colors.splice(0, 0, 'transparent');

Highcharts.chart('sunburst', {

  chart: {
    height: '100%'
  },

  title: {
    text: 'Baccalauréats'
  },
  series: [{
    type: "sunburst",
    data: <%= data.to_json.html_safe %>,
    allowDrillToNode: true,
    cursor: 'pointer',
    dataLabels: false,
    levels: [{
      level: 1,
      levelIsConstant: false,
      dataLabels: {
        filter: {
          property: 'outerArcLength',
          operator: '>',
          value: 64
        }
      }
    }, {
      level: 2,
      colorByPoint: true
    },
    {
      level: 3,
      colorVariation: {
        key: 'brightness',
        to: -0.5
      }
    }, {
      level: 4,
      colorVariation: {
        key: 'brightness',
        to: 0.5
      }
    }]

  }],
  tooltip: {
    headerFormat: "",
    pointFormat: '{point.value} {point.name}'
  }
});
</script>
